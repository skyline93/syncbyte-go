// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/syncbyte.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncbyteClient is the client API for Syncbyte service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncbyteClient interface {
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (Syncbyte_BackupClient, error)
}

type syncbyteClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncbyteClient(cc grpc.ClientConnInterface) SyncbyteClient {
	return &syncbyteClient{cc}
}

func (c *syncbyteClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (Syncbyte_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Syncbyte_ServiceDesc.Streams[0], "/proto.Syncbyte/Backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncbyteBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Syncbyte_BackupClient interface {
	Recv() (*BackupResponse, error)
	grpc.ClientStream
}

type syncbyteBackupClient struct {
	grpc.ClientStream
}

func (x *syncbyteBackupClient) Recv() (*BackupResponse, error) {
	m := new(BackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncbyteServer is the server API for Syncbyte service.
// All implementations must embed UnimplementedSyncbyteServer
// for forward compatibility
type SyncbyteServer interface {
	Backup(*BackupRequest, Syncbyte_BackupServer) error
	mustEmbedUnimplementedSyncbyteServer()
}

// UnimplementedSyncbyteServer must be embedded to have forward compatible implementations.
type UnimplementedSyncbyteServer struct {
}

func (UnimplementedSyncbyteServer) Backup(*BackupRequest, Syncbyte_BackupServer) error {
	return status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedSyncbyteServer) mustEmbedUnimplementedSyncbyteServer() {}

// UnsafeSyncbyteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncbyteServer will
// result in compilation errors.
type UnsafeSyncbyteServer interface {
	mustEmbedUnimplementedSyncbyteServer()
}

func RegisterSyncbyteServer(s grpc.ServiceRegistrar, srv SyncbyteServer) {
	s.RegisterService(&Syncbyte_ServiceDesc, srv)
}

func _Syncbyte_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncbyteServer).Backup(m, &syncbyteBackupServer{stream})
}

type Syncbyte_BackupServer interface {
	Send(*BackupResponse) error
	grpc.ServerStream
}

type syncbyteBackupServer struct {
	grpc.ServerStream
}

func (x *syncbyteBackupServer) Send(m *BackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Syncbyte_ServiceDesc is the grpc.ServiceDesc for Syncbyte service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Syncbyte_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Syncbyte",
	HandlerType: (*SyncbyteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Backup",
			Handler:       _Syncbyte_Backup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/syncbyte.proto",
}
